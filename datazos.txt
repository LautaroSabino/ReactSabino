// --------------- Definir variables y objetos para llamarlos ------------------

 import './App.css';

 function retornarAleatorio() {
   return Math.trunc(Math.random() * 10);
 }

 function App() {
   const siglo = 21
   const persona = {
     nombre: 'Juan',
     edad: 34
   }
   return (
     <div>
       <h1>Título nivel 1</h1>
       <hr />
       <p>Estamos en el siglo {siglo}</p>
       <h3>Acceso a un objeto</h3>
       <p>{persona.nombre} tiene {persona.edad} años</p>
       <h3>Llamada a un método</h3>
       <p>Un valor aleatorio llamando a un método.</p>
       {retornarAleatorio()}
       <h3>Calculo inmediato de expresiones</h3>
       3 + 3 = {3 + 3}
     </div>
   );
 }

 export default App;


// ----------------------------------------------------------------------

// --------------------Elementos de un array-----------------------------

 import './App.css';

 function retornarAleatorio() {
   return Math.trunc(Math.random() * 10);
 }

 function App() {
   const buscadores = ['http://www.google.com',
     'http://www.bing.com',
     'http://www.yahoo.com'];
   return (
     <div>
       <a href={buscadores[0]}>Google</a><br />
       <a href={buscadores[1]}>Bing</a><br />
       <a href={buscadores[2]}>Yahoo</a><br />
     </div>
   );
 }

// export default App;


---Funciones con parámetros reutilizables-------------------------------------

import './App.css';

function mostrarTitulo(tit) {
return (<h1>
     {tit}
   </h1>);
 }

 function App() {
   return (
     <div>
       {mostrarTitulo('Hola Mundo')}
       {mostrarTitulo('Fin')}
     </div>
   );
 }

 export default App;



//**** Importante ****

hay que tener en cuenta que los nombres de las propiedades de los elementos HTML cambian en varias situaciones:

Debemos utilizar la palabra 'className' en lugar de class (debido a que class es una palabra clave de Javascript):

<h1 className="recuadro">Titulo 1</h1>
Si el nombre de la propiedad está formada por más de una palabra luego el primer caracter a partir de la segunda palabra debe ir en mayúsculas:

<input type="text" tabIndex="1" />

Para llamar a una función en jsx pongo <Ejemplo/>

function Titulo(props) {

  return (
  <div>
  <h1>{props.titulo}</h1>
  <h2>{props.subtitulo}</h2>
  </div>
  )
}

function App() {
  return (<div>
  <Titulo titulo='Franco' />
  <Titulo subtitulo='te chupo todo' />
  </div>
  )
}

===============================================================================

si pongo rfce me hace un componente con la extensión React Snippet o algo asi.

===============================================================================

El padre nuestro de React es:

Un rerender ocurre cuando se activa un evento, cuando se cambia el estado y cuando hay un cambio en una props. 

Los estados son variables evolucionadas!!

¿Y por qué se genera un Re Render? Porque justamente React lo que hace es renderizar el sitio por partes sin tocar el resto de la aplicación.

===============================================================================

HOOKS

* { UseState } > sirve (por ahora) para salvar un valor en un estado y que al renderizarse no se pierda. 

* { UseEffect } > sirve (por ahora) para que un pedazo de codigo se ejecute despues del montaje, sería hablando en criollo como si dejara un pedazo de codigo abajo de todo, luego del componente que se esta montando o renderizando. 

=============================================================================

A continuación, un codigo probando un contador y un boton de cambiar estado. Eso sirve para ver como funcionan los hook UseState y UseEffect

import { useEffect } from 'react'
import { useState } from 'react'
import './ItemListContainer.css'

const ItemListContainer = (props) => {

  const [count, setCount] = useState(0)
  const [bool, setBool] = useState(true)

  const sumar = () => {
    setCount(count + 1)
  }

  const cambiarEstado = () =>{
    setBool(!bool)
  }

  useEffect(()=>{
    
    console.log('Se ejecuta siempre por cada render - 1')
    
  })

  useEffect(()=>{
    
    console.log('Esto es una tarea pesada, llamada a API- 2')

  }, [])

  useEffect(()=>{
    
    console.log('Esto es un cambio de estado- 4')
    console.log(bool)

  }, [bool])

  console.log('Esta es otra tarea - 4')
  

  return (<div>

    <div className='saludo'>
      <h2>{props.greeting}</h2>
    </div>

    <div>
      {count}
    </div>

    <div className='btn boton'>
      <button onClick={sumar}> + </button>
    </div>

    <div className='btn boton'>
      <button onClick={cambiarEstado}> Cambiar estado </button>
    </div>
  </div>
  )
}

export default ItemListContainer

// TRAER UN SOLO OBJETO. 
// useEffect(()=> {
//     const dbFirestore = getFirestore()
//     const queryCollection = doc(dbFirestore, 'Items', '52Ch9ggVEkHdSVNV7Fy2')
//     getDoc(queryCollection)
//     .then((doc)=> setProducto({id: doc.id, ... doc.data()}))
//     .catch(err => console.log(err))
//     .finally(() => console.log('Siempre'))
// },[]) 

// TRAER VARIOS OBJETOS

useEffect(()=> {
  const dbFirestore = getFirestore()
  const queryCollection = collection(dbFirestore, 'Items')
  let queryFilter= query(queryCollection, where('categoria', '==', 'Lona Reforzada'))
  getDocs(queryFilter)
  .then((resp)=> setProducts(resp.docs.map(doc=> ({id: doc.id, ...doc.data()}) )))
  .catch(err => console.log(err))
  .finally(() => console.log('Siempre'))
},[]) 

===============================================================================

Ayuda de memoria para lo que es CONTEXT

create context => para crear
provider => proveedor
use Context => para usar